//services

//FXTrading.java



package com.FXTrading.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import org.springframework.stereotype.Component;
import com.FXTrading.model.FXTradingEntity;

@Component
public class FXTradingLogic  {
	
	private List<FXTradingEntity> bookedTradesEntities=new ArrayList<>();
	

	
	public Object doTrade(FXTradingEntity fxTradingEntity){
		
		Map<String, String> errorsByUser=new HashMap<>();
		
		if(fxTradingEntity.getCustomerName().isBlank())
		{
			errorsByUser.put("Customer-Name", "Customer name cannot be empty");
		}
		if(fxTradingEntity.getUsd_Amount()<0)
		{
			errorsByUser.put("USD-Amount", "Amount cannot be Negative");
		}
		if(!fxTradingEntity.getCurrencyPair().equals("USDINR"))
		{
			errorsByUser.put("Currency-Pair", "Currency pair is not USDINR");
		}
			
		if(errorsByUser.isEmpty())
		{
			String indianAmount= ""+(fxTradingEntity.getUsd_Amount()*66);
			fxTradingEntity.setIndianAmount(indianAmount);
	       
			this.bookedTradesEntities.add(fxTradingEntity);
			return fxTradingEntity;
		}
		else {
			return errorsByUser;
		}
		
	}
	
	public List<FXTradingEntity> getTradeList()
	{
		return this.bookedTradesEntities;
	}
	


//request.java


package com.FXTrading.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.FXTrading.model.FXTradingEntity;
import com.FXTrading.services.FXTradingLogic;

@RestController
public class FXTradingRequests {

	@Autowired
	private FXTradingLogic fxTradingFormatImpl;

	@PostMapping(value = "/trade")
	public Object doTrading(@RequestBody FXTradingEntity fxTradingEntity) {
		
		if (fxTradingEntity == null) {
			return "Not Booked";
		}
		try {
			Object object = fxTradingFormatImpl.doTrade(fxTradingEntity);
			if (object instanceof Map) {
				((Map) object).put("Status", "Not Booked");
				return object;
			} else {
				return "Trade Booked";
			}

		} catch (Exception e) {
			return e.getMessage();
		}

	}

	@GetMapping("/get-all-trades")
	public Object getAllTrades() {
		List<FXTradingEntity> tradeList = this.fxTradingFormatImpl.getTradeList();
		if (tradeList.isEmpty()) {
			return "Your trade List is Empty";
		} else {
			return tradeList;
		}
	}

}
	
	
	
}






//entity.java
package com.FXTrading.model;
public class FXTradingEntity{
		
	private double usd_Amount;
	
	private String customerName;
	
	private String currencyPair;
		
	public String getIndianAmount() {
		return indianAmount;
	}

	public void setIndianAmount(String indianAmount) {
		this.indianAmount = indianAmount;
	}

	private String indianAmount;
	
	

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	
	public String getCurrencyPair() {
		return currencyPair;
	}



//application


package com.FXTrading;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FxTradingApplication {

	public static void main(String[] args) {
		
		SpringApplication.run(FxTradingApplication.class, args);
		
		System.out.println("Application Started");
	}

}
	public void setCurrencyPair(String currencyPair) {
		this.currencyPair = currencyPair;
	}

	
	public FXTradingEntity() {
		super();
	}

	public FXTradingEntity(double usd_Amount, String customerName, String currencyPair) {
		super();
		this.usd_Amount = usd_Amount;
		
		this.customerName = customerName;
		this.currencyPair = currencyPair;
	}

	@Override
	public String toString() {
		return "FXTradingEntity [usd_Amount=" + usd_Amount + ", customerName="
				+ customerName + ", currencyPair=" + currencyPair + ", indianAmount=" + indianAmount + "]";
	}

	public double getUsd_Amount() {
		return usd_Amount;
	}

	public void setUsd_Amount(double usd_Amount) {
		this.usd_Amount = usd_Amount;
	}

	

	
	

	

	
	
	
	
	
}

